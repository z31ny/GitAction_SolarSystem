name: solar-system-workflow

on:
  workflow_call:
    inputs:
      pipeline_input:
        description: 'Input value passed from the main pipeline'
        required: true
        type: string

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:
  unit_testing:
    name: unit_testing
    strategy:
      matrix:
        nodejs-version: [18, 19, 20]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        exclude:
        - nodejs-version: 18
          os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v5

    - name: Set up Node.js - ${{ matrix.nodejs-version }}
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ matrix.nodejs-version }}

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      id: nodeNodeJs-unit-testing-step
      run: npm test

    - name: Archive test results
      if: steps.nodeNodeJs-unit-testing-step.outcome == 'failure' || steps.nodeNodeJs-unit-testing-step.outcome == 'success'
      uses: actions/upload-artifact@v4.6.2
      with:
        name: sp-test-results-${{matrix.os}}-${{matrix.nodejs-version}}
        path: test-results.xml

  code-coverage:
    name: code-coverage
    needs: unit_testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Set up Node.js - 18
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage
      
      - name: Archive Coverage results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-coverage-results
          path: coverage
          retention-days: 5

  docker:
    name: containerization
    needs: [unit_testing, code-coverage]
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v5
    
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: GHCR Login
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Docker Image
      uses: docker/build-push-action@v4
      with:
        push: false
        tags: ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}
        
    - name: Test Image
      run: |
        docker images
        docker run --name solar-system-app -d \
        -p 3000:3000 \
        -e MONGO_URI=$MONGO_URI \
        -e MONGO_USERNAME=$MONGO_USERNAME \
        -e MONGO_PASSWORD=$MONGO_PASSWORD \
        ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}
        export IP_ADDRESS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        echo $IP
        echo Testing image URL using wget
        wget -q -O - 127.0.0.1:3000/live | grep live

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}
          ghcr.io/abdullahwahdan/solar-system:fd763e67db03ecb5bb601a048c5f913a8ba9bdcb

  trivy-scan:
    name: Trivy Security Scan
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  
      actions: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Scan Docker Image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: image
          image-ref: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
          format: table
          output: trivy-image-report.txt
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0

      - name: Generate SBOM (CycloneDX)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: image
          image-ref: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
          format: cyclonedx
          output: trivy-sbom.cdx
          exit-code: 0

      - name: Scan Docker Image (SARIF)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: image
          image-ref: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          exit-code: 0
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Scan Terraform configs
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: config
          scan-ref: ./Terraform
          format: table
          output: trivy-terraform-report.txt
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0

      - name: Scan Source Code for Secrets
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-secrets-report.txt
          severity: HIGH,CRITICAL
          exit-code: 0

      - name: Upload Trivy Reports
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: trivy-reports
          path: |
            trivy-image-report.txt
            trivy-sbom.cdx
            trivy-results.sarif
            trivy-terraform-report.txt
            trivy-secrets-report.txt

  terraform:
    name: terraform-deployment
    needs: [docker, code-coverage, unit_testing, trivy-scan]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v5
    
    - name: AWS login
      uses: aws-actions/configure-aws-credentials@v4.3.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: 1.1.7
    
    - name: terraform init
      run: terraform init
      working-directory: ./Terraform/team-01

    - name: terraform plan
      run: terraform plan
      working-directory: ./Terraform/team-01

    - name: terraform apply or destroy
      run: |
          if [ "${{ github.event.inputs.destroy }}" = "yes" ]; then
          terraform destroy -auto-approve
          else
          terraform apply -auto-approve
          fi
      working-directory: ./Terraform/team-01

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name GP-cluster

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Create MongoDB Secret
        run: |
          kubectl create namespace solar-system --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic mongo-credentials \
            --namespace solar-system \
            --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy Solar System via Helm
        run: |
          helm upgrade --install solar-system ./helm/solar-system-chart \
            --namespace solar-system --create-namespace
